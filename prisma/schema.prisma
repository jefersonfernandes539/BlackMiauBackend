generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/////////////////////////
// USERS
/////////////////////////

model User {
  id           String       @id @default(uuid())
  name         String
  email        String       @unique
  password     String
  type         UserType
  profilePhoto String?
  phone        String?
  createdAt    DateTime     @default(now())

  musician       Musician?
  venue          Venue?
  clientProfile  ClientProfile?

  ratingsGiven    Rating[] @relation("GivenRatings")
  ratingsReceived Rating[] @relation("ReceivedRatings")
}

enum UserType {
  MUSICIAN
  VENUE
  CLIENT
}

/////////////////////////
// MUSICIANS
/////////////////////////

model Musician {
  id            String   @id
  user          User     @relation(fields: [id], references: [id])
  musicStyle    String
  biography     String?
  videos        String[]
  averageRating Float?

  schedules      Schedule[]
  bookings       Booking[]
  chats          Chat[]

  favoritedBy    ClientProfile[] @relation("ClientFavoriteMusicians")
}

/////////////////////////
// VENUES
/////////////////////////

model Venue {
  id                 String   @id
  user               User     @relation(fields: [id], references: [id])
  venueName          String
  address            String
  preferredMusicType String
  capacity           Int
  averageRating      Float?
  latitude           Float?
  longitude          Float?

  bookings Booking[]
  chats    Chat[]

  favoritedBy ClientProfile[] @relation("ClientFavoriteVenues")
}

/////////////////////////
// CLIENTS
/////////////////////////

model ClientProfile {
  id        String @id @default(uuid())
  userId    String @unique
  user      User   @relation(fields: [userId], references: [id])

  favoriteMusicians Musician[] @relation("ClientFavoriteMusicians")
  favoriteVenues    Venue[]    @relation("ClientFavoriteVenues")
}

/////////////////////////
// SCHEDULES
/////////////////////////

model Schedule {
  id         String   @id @default(uuid())
  musicianId String
  date       DateTime
  startTime  DateTime
  endTime    DateTime
  available  Boolean  @default(true)

  musician   Musician @relation(fields: [musicianId], references: [id])
}

/////////////////////////
// BOOKINGS
/////////////////////////

model Booking {
  id          String   @id @default(uuid())
  musicianId  String
  venueId     String
  eventDate   DateTime
  startTime   DateTime
  endTime     DateTime
  status      BookingStatus @default(PENDING)
  price       Float?

  musician   Musician @relation(fields: [musicianId], references: [id])
  venue      Venue    @relation(fields: [venueId], references: [id])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}

/////////////////////////
// RATINGS
/////////////////////////

model Rating {
  id          String   @id @default(uuid())
  raterId     String
  ratedId     String
  score       Int
  comment     String?
  ratedAt     DateTime @default(now())

  rater       User @relation("GivenRatings", fields: [raterId], references: [id])
  rated       User @relation("ReceivedRatings", fields: [ratedId], references: [id])
}

/////////////////////////
// CHATS
/////////////////////////

model Chat {
  id          String   @id @default(uuid())
  musicianId  String
  venueId     String
  message     String
  sender      Sender
  sentAt      DateTime @default(now())

  musician   Musician @relation(fields: [musicianId], references: [id])
  venue      Venue    @relation(fields: [venueId], references: [id])
}

enum Sender {
  MUSICIAN
  VENUE
}
